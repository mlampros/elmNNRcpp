// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// satlins
arma::mat satlins(arma::mat x);
RcppExport SEXP _elmNNRcpp_satlins(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(satlins(x));
    return rcpp_result_gen;
END_RCPP
}
// tribas
arma::mat tribas(arma::mat x);
RcppExport SEXP _elmNNRcpp_tribas(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tribas(x));
    return rcpp_result_gen;
END_RCPP
}
// hardlim
arma::mat hardlim(arma::mat x);
RcppExport SEXP _elmNNRcpp_hardlim(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hardlim(x));
    return rcpp_result_gen;
END_RCPP
}
// hardlims
arma::mat hardlims(arma::mat x);
RcppExport SEXP _elmNNRcpp_hardlims(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hardlims(x));
    return rcpp_result_gen;
END_RCPP
}
// relu
arma::mat relu(arma::mat x, double alpha);
RcppExport SEXP _elmNNRcpp_relu(SEXP xSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(relu(x, alpha));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(int seed);
RcppExport SEXP _elmNNRcpp_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// uniform_negative
arma::mat uniform_negative(int n_rows, int n_cols);
RcppExport SEXP _elmNNRcpp_uniform_negative(SEXP n_rowsSEXP, SEXP n_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type n_cols(n_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(uniform_negative(n_rows, n_cols));
    return rcpp_result_gen;
END_RCPP
}
// activation_functions
arma::mat activation_functions(arma::mat& tempH, std::string actfun, double alpha);
RcppExport SEXP _elmNNRcpp_activation_functions(SEXP tempHSEXP, SEXP actfunSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type tempH(tempHSEXP);
    Rcpp::traits::input_parameter< std::string >::type actfun(actfunSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(activation_functions(tempH, actfun, alpha));
    return rcpp_result_gen;
END_RCPP
}
// elm_train_rcpp
Rcpp::List elm_train_rcpp(arma::mat& x, arma::mat y, int nhid, std::string actfun, std::string init_weights, bool bias, double moorep_pseudoinv_tol, double alpha, int seed, bool verbose);
RcppExport SEXP _elmNNRcpp_elm_train_rcpp(SEXP xSEXP, SEXP ySEXP, SEXP nhidSEXP, SEXP actfunSEXP, SEXP init_weightsSEXP, SEXP biasSEXP, SEXP moorep_pseudoinv_tolSEXP, SEXP alphaSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type nhid(nhidSEXP);
    Rcpp::traits::input_parameter< std::string >::type actfun(actfunSEXP);
    Rcpp::traits::input_parameter< std::string >::type init_weights(init_weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< double >::type moorep_pseudoinv_tol(moorep_pseudoinv_tolSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(elm_train_rcpp(x, y, nhid, actfun, init_weights, bias, moorep_pseudoinv_tol, alpha, seed, verbose));
    return rcpp_result_gen;
END_RCPP
}
// norm_preds
arma::mat norm_preds(arma::mat x);
RcppExport SEXP _elmNNRcpp_norm_preds(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(norm_preds(x));
    return rcpp_result_gen;
END_RCPP
}
// elm_predict_rcpp
arma::mat elm_predict_rcpp(Rcpp::List object, arma::mat& newdata, bool normalize);
RcppExport SEXP _elmNNRcpp_elm_predict_rcpp(SEXP objectSEXP, SEXP newdataSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(elm_predict_rcpp(object, newdata, normalize));
    return rcpp_result_gen;
END_RCPP
}
// onehot_labels_rcpp
arma::mat onehot_labels_rcpp(arma::rowvec x);
RcppExport SEXP _elmNNRcpp_onehot_labels_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(onehot_labels_rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
